#!/usr/bin/env bash

set -e

PERSONAL=~/personal
BIN=~/bin

DOTFILES_DIRECTORY="${HOME}/.dotfiles"
DOTFILES_TARBALL_PATH="https://github.com/Nerconer/dotfiles/tarball/master"
DOTFILES_GIT_REMOTE="git@github.com:Nerconer/dotfiles.git"

declare -a LINKS="("git" "nano" "nvim" "tmux" "scripts" "zsh")"

echo ""

# If missing, download and extract the dotfiles repository
if [[ ! -d ${DOTFILES_DIRECTORY} ]]; then
	echo "Downloading dotfiles from repository..."
	mkdir "${DOTFILES_DIRECTORY}"
	# Get the tarball
	curl -fsSLo "${HOME}"/dotfiles.tar.gz ${DOTFILES_TARBALL_PATH}
	# Extract to the dotfiles directory
	tar -zxf "${HOME}"/dotfiles.tar.gz --strip-components 1 -C "${DOTFILES_DIRECTORY}"
	# Remove the tarball
	rm -rf "${HOME}"/dotfiles.tar.gz
fi

cd "${DOTFILES_DIRECTORY}"

source ./lib/*

if ! command_exists 'brew'; then
	setup_homebrew
fi

if ! command_exists 'git'; then
	echo "Updating Homebrew..."	
  brew update
	echo "Installing Git..."
	brew install git
fi

# Initialize the git repository if it's missing
if ! is_git_repo; then
	echo "Initializing git repository..."
	git init
	git remote add origin ${DOTFILES_GIT_REMOTE}
	git fetch origin master
	# Reset the index and working tree to the fetched HEAD
	# (submodules are cloned in the subsequent sync step)
	git reset --hard FETCH_HEAD
	# Remove any untracked files
	git clean -fd
fi

echo -e "Syncing dotfiles..."
# Pull latest changes
git pull --rebase origin master

function usage() {
cat <<EOT
	dotfiles - David Solà
	Usage: $(basename "$0") [options]
	Options:
			-h, --help	Print this help text
			backup     	Generates a Backup file
			link   			Configures all symlinks
			git       	Configures Git
			homebrew    Install dependencies
			shell       Configures Shell
			all       	Full setup and configuration
	Documentation can be found at https://github.com/Nerconer/dotfiles
	Copyright (c) David Solà
	Licensed under the MIT license.
EOT
}

[ ! -d "$PERSONAL" ] && echo "Creating personal directory..." && mkdir -p "$PERSONAL"

[ ! -d "$BIN" ] && echo "Creating ~/bin directory..." && mkdir "$BIN"

if [[ "$1" == "-h" || "$1" == "--help" ]]; then
	usage
	exit
fi

case "$1" in
	backup)
		setup_backup
		;;
	link)
		setup_symlinks
		;;
	git)
		setup_git
		;;
	homebrew)
		setup_homebrew
		;;
	shell)
		setup_shell
		;;
	all|*)
		setup_symlinks
		setup_shell
		setup_homebrew
		;;
esac

success "Done."
exit 0
